#!/bin/bash

CLYDE_TMP=clyde-tmp
SUDO=sudo
PACKAGE="$2"

function clean_up () {
	cd ~
	rm -rf $CLYDE_TMP 
	exit
}

function build_pkg () {
	git clone $1 # clone
	cd $PACKAGE
	$EDITOR ~/$CLYDE_TMP/$PACKAGE/PKGBUILD
	makepkg -si
}

function check_version () {
	# Check if package exists
	pacman -Qi $PACKAGE > /dev/null
	if [ $? -eq 0 ] 
	then
		# Compare the versions
		INSTALLED_VERSION=$(pacman -Qi $PACKAGE | grep -Po '^Version\s*: \K.+')
		REMOTE_VERSION=$(curl -s $1 | jq '.["results"][0]["Version"]' | sed -e 's/^"//' -e 's/"$//')
		if [ "$INSTALLED_VERSION" = "$REMOTE_VERSION" ]
		then
			echo 0
		else
			echo "Found update for ${PACKAGE} from ${INSTALLED_VERSION} to ${REMOTE_VERSION}"
		fi
	else
		echo 1
	fi
}

function clone_aur_pkg () {
	PKG_GIT_URL="https://aur.archlinux.org/$PACKAGE.git"
	PKG_INFO_URL="https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$PACKAGE"
	OPTION="n"

	# Check if package exists
	if curl -s --request GET $PKG_INFO_URL | grep '"resultcount":0' > /dev/null
	then
	       echo "Package ${PACKAGE} not found"
	       exit
	else
		IS_UP_TO_DATE=$(check_version $PKG_INFO_URL)
		if [ "${IS_UP_TO_DATE}" = 0 ]
		then 
			echo "Package already up to date"
			exit
		fi
		mkdir $CLYDE_TMP
		cd $CLYDE_TMP
		read -p "Install ${PACKAGE}? [y/N]: " OPTION
		if [[ "$OPTION" == "n" || "$OPTION" == "N" ]]
		then
			echo "Canceled by the user! Exiting..."
			clean_up
		fi
		
		build_pkg $PKG_GIT_URL

		# Clean up
		cd ~
		echo "Cleaning up..."
		clean_up
	fi
}

function upgrade_pkgs () {
	if [ "$PACKAGE" != "" ]
	then 
		clone_aur_pkg
	fi
	LOCAL_PKGS=$(pacman -Qm | cut -f 1 -d " ") # not technically accurate, but accurate enough
	AMOUNT_UPDATED=0
	array=($LOCAL_PKGS)
	for element in "${array[@]}"
	do 
		PACKAGE="${element}"
		PKG_INFO_URL="https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=$PACKAGE"
		NEEDS_UPDATE=$(check_version $PKG_INFO_URL)
		if [[ "${NEEDS_UPDATE}" = 1 ]]
		then 
			clone_aur_pkg
			AMOUNT_UPDATED=$AMOUNT_UPDATED+1
		fi
	done
	if [[ AMOUNT_UPDATED -eq 0 ]]
	then 
		echo "No packages to update"
	else
		echo "Updated ${AMOUNT_UPDATED} packages"
	fi
}

if [[ "${1-}" =~ ^-*h(elp)?$ ]]; then
	echo 'Usage: '
	echo "install/ins [PACKAGE]: Installs a package"
	echo "yeet/remove/rm [PACKAGE]: Removes a package"
	echo "upgrade/upg [OPTIONAL_PACKAGE]: Checks if AUR packages can update, or if the specificed package can update"
	exit
fi

cd ~
if [[ "$1" = "install" || "$1" = "ins" ]] 
then
	clone_aur_pkg
elif [[ "$1" = "upgrade" || "$1" = "upg" ]]
then
	upgrade_pkgs
elif [[ "$1" = "yeet" || "$1" = "remove "] ||  "$1" = "rm" ]] 
then 
	$SUDO pacman -Rn $PACKAGE
else
	echo "Unreconized argument!"
fi
